{
  "code" : "io.liquichain.api.rpc.DatabaseWallet",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.exception.EntityDoesNotExistsException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.customEntities.LiquichainApp;\nimport org.meveo.model.customEntities.VerifiedEmail;\nimport org.meveo.model.customEntities.VerifiedPhoneNumber;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.web3j.crypto.*;\n\nimport io.liquichain.api.rpc.EthApiUtils;\n\npublic class DatabaseWallet extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(DatabaseWallet.class);\n\n    private static final String NOT_IMPLEMENTED_ERROR = \"Feature not yet implemented\";\n    private static final String CREATE_WALLET_ERROR = \"Failed to create wallet\";\n    private static final String UPDATE_WALLET_ERROR = \"Failed to update wallet\";\n    private static final String UNKNOWN_WALLET_ERROR = \"Unknown wallet\";\n    private static final String UNKNOWN_APPLICATION_ERROR = \"Unknown application\";\n    private static final String WALLET_EXISTS_ERROR = \"Wallet already exists\";\n    private static final String EMAIL_EXISTS_ERROR = \"Email address: %s, already exists\";\n    private static final String PHONE_NUMBER_EXISTS_ERROR = \"Phone number: %s, already exists\";\n    private static final String TRANSACTION_EXISTS_ERROR = \"Transaction already exists: {}\";\n    private static final String INVALID_REQUEST = \"-32600\";\n    private static final String INTERNAL_ERROR = \"-32603\";\n    private static final String RESOURCE_NOT_FOUND = \"-32001\";\n    private static final String TRANSACTION_REJECTED = \"-32003\";\n    private static final String METHOD_NOT_FOUND = \"-32601\";\n\n    private final CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private final RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private final Repository defaultRepo = repositoryService.findDefaultRepository();\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n    private ParamBean config = paramBeanFactory.getInstance();\n\n    private String APP_NAME = config.getProperty(\"eth.api.appname\", \"licoin\");\n\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        // TODO Auto-generated method stub\n    }\n\n    public String createWallet(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String name = params.get(0);\n        String walletHash = EthApiUtils.retrieveHash(params, 1);\n        String accountHash = EthApiUtils.retrieveHash(params, 2);\n        String publicInfo = params.get(3);\n\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\n        } catch (EntityDoesNotExistsException e) {\n            // do nothing, we want wallet to be unique\n        }\n        if (wallet != null) {\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, WALLET_EXISTS_ERROR);\n        } else {\n            wallet = new Wallet();\n        }\n        LiquichainApp app = null;\n        try {\n            app = crossStorageApi.find(defaultRepo, LiquichainApp.class).by(\"name\", APP_NAME).getResult();\n        } catch (Exception e) {\n            LOG.error(UNKNOWN_APPLICATION_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_APPLICATION_ERROR);\n        }\n        wallet.setUuid(walletHash);\n        wallet.setName(name);\n        wallet.setAccountHash(accountHash);\n        wallet.setPublicInfo(publicInfo);\n        wallet.setBalance(\"0\");\n        wallet.setApplication(app);\n        try {\n            String savedHash = crossStorageApi.createOrUpdate(defaultRepo, wallet);\n            return EthApiUtils.createResponse(requestId, \"0x\" + savedHash);\n        } catch (Exception e) {\n            LOG.error(CREATE_WALLET_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INTERNAL_ERROR, CREATE_WALLET_ERROR);\n        }\n    }\n\n    public String updateWallet(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String name = params.get(0);\n        String walletHash = EthApiUtils.retrieveHash(params, 1);\n        String publicInfo = params.get(2);\n\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n        } catch (EntityDoesNotExistsException e) {\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\n            wallet = null;\n        }\n        if (wallet == null) {\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\n        }\n        wallet.setName(name);\n        wallet.setPublicInfo(publicInfo);\n        try {\n            crossStorageApi.createOrUpdate(defaultRepo, wallet);\n            return EthApiUtils.createResponse(requestId, name);\n        } catch (Exception e) {\n            LOG.error(UPDATE_WALLET_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INTERNAL_ERROR, UPDATE_WALLET_ERROR);\n        }\n    }\n\n    public String getWalletInfo(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String walletHash = EthApiUtils.retrieveHash(params, 0);\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n        } catch (Exception e) {\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\n            wallet = null;\n        }\n        if (wallet == null) {\n            return EthApiUtils.createErrorResponse(requestId, RESOURCE_NOT_FOUND, UNKNOWN_WALLET_ERROR);\n        }\n        String response = \"{\\n\";\n        response += \"\\\"name\\\":\\\"\" + wallet.getName() + \"\\\"\";\n        if (wallet.getPublicInfo() != null) {\n            response += \",\\n\\\"publicInfo\\\":\" + wallet.getPublicInfo() + \"\";\n        }\n        response += \"\\n}\";\n        return EthApiUtils.createResponse(requestId, response);\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}