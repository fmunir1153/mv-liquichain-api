{
  "code" : "io.liquichain.api.rpc.DatabaseWallet",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport static io.liquichain.api.rpc.EthApiConstants.*;\n\nimport java.util.List;\nimport java.util.Map;\n\nimport org.meveo.api.exception.EntityDoesNotExistsException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.customEntities.LiquichainApp;\nimport org.meveo.model.customEntities.VerifiedEmail;\nimport org.meveo.model.customEntities.VerifiedPhoneNumber;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.web3j.crypto.*;\n\npublic class DatabaseWallet extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(DatabaseWallet.class);\n\n    private final CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private final RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private final Repository defaultRepo = repositoryService.findDefaultRepository();\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n    private ParamBean config = paramBeanFactory.getInstance();\n\n    private String APP_NAME = config.getProperty(\"eth.api.appname\", \"licoin\");\n\n    public String createWallet(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String name = params.get(0);\n        String walletHash = EthApiUtils.retrieveHash(params, 1);\n        String accountHash = EthApiUtils.retrieveHash(params, 2);\n        String publicInfo = params.get(3);\n\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\n        } catch (EntityDoesNotExistsException e) {\n            // do nothing, we want wallet to be unique\n        }\n        if (wallet != null) {\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, WALLET_EXISTS_ERROR);\n        } else {\n            wallet = new Wallet();\n        }\n        LiquichainApp app = null;\n        try {\n            app = crossStorageApi.find(defaultRepo, LiquichainApp.class).by(\"name\", APP_NAME).getResult();\n        } catch (Exception e) {\n            LOG.error(UNKNOWN_APPLICATION_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_APPLICATION_ERROR);\n        }\n        wallet.setUuid(walletHash);\n        wallet.setName(name);\n        wallet.setAccountHash(accountHash);\n        wallet.setPublicInfo(publicInfo);\n        wallet.setBalance(\"0\");\n        wallet.setApplication(app);\n        try {\n            String savedHash = crossStorageApi.createOrUpdate(defaultRepo, wallet);\n            return EthApiUtils.createResponse(requestId, \"0x\" + savedHash);\n        } catch (Exception e) {\n            LOG.error(CREATE_WALLET_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INTERNAL_ERROR, CREATE_WALLET_ERROR);\n        }\n    }\n\n    public String updateWallet(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String name = params.get(0);\n        String walletHash = EthApiUtils.retrieveHash(params, 1);\n        String publicInfo = params.get(2);\n\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n        } catch (EntityDoesNotExistsException e) {\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\n            wallet = null;\n        }\n        if (wallet == null) {\n            return EthApiUtils.createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\n        }\n        wallet.setName(name);\n        wallet.setPublicInfo(publicInfo);\n        try {\n            crossStorageApi.createOrUpdate(defaultRepo, wallet);\n            return EthApiUtils.createResponse(requestId, name);\n        } catch (Exception e) {\n            LOG.error(UPDATE_WALLET_ERROR, e);\n            return EthApiUtils.createErrorResponse(requestId, INTERNAL_ERROR, UPDATE_WALLET_ERROR);\n        }\n    }\n\n    public String getWalletInfo(String requestId, Map<String, Object> parameters) {\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String walletHash = EthApiUtils.retrieveHash(params, 0);\n        Wallet wallet = null;\n        try {\n            wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n        } catch (Exception e) {\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\n            wallet = null;\n        }\n        if (wallet == null) {\n            return EthApiUtils.createErrorResponse(requestId, RESOURCE_NOT_FOUND, UNKNOWN_WALLET_ERROR);\n        }\n        String response = \"{\\n\";\n        response += \"\\\"name\\\":\\\"\" + wallet.getName() + \"\\\"\";\n        if (wallet.getPublicInfo() != null) {\n            response += \",\\n\\\"publicInfo\\\":\" + wallet.getPublicInfo() + \"\";\n        }\n        response += \"\\n}\";\n        return EthApiUtils.createResponse(requestId, response);\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ {
    "code" : "io.liquichain.api.rpc.EthApiUtils",
    "inputs" : [ ],
    "outputs" : [ ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package io.liquichain.api.rpc;\n\nimport java.math.BigInteger;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.service.script.Script;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.web3j.crypto.*;\n\npublic class EthApiUtils extends Script {\n  private static final Logger LOG = LoggerFactory.getLogger(EthApiUtils.class);\n\n  @Override\n  public void execute(Map<String, Object> parameters) throws BusinessException {}\n\n  public static String createResponse(String requestId, String result) {\n    String resultFormat = result.startsWith(\"{\") ? \"%s\" : \"\\\"%s\\\"\";\n    String response = new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"result\\\": \").append(String.format(resultFormat, result)).append(\"\\n\")\n        .append(\"}\").toString();\n    LOG.debug(\"response: {}\", response);\n    return response;\n  }\n\n  public static String createErrorResponse(String requestId, String errorCode, String message) {\n    String response = new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"error\\\": {\\n\")\n        .append(\"    \\\"code\\\": \").append(errorCode).append(\",\\n\")\n        .append(\"    \\\"message\\\": \\\"\").append(message).append(\"\\\"\\n\")\n        .append(\"  }\\n\")\n        .append(\"}\").toString();\n    LOG.debug(\"error response: {}\", response);\n    return response;\n  }\n\n  public static String normalizeHash(String hash) {\n    if (hash.startsWith(\"0x\")) {\n      return hash.substring(2);\n    }\n    return hash;\n  }\n\n  public static String retrieveHash(List<String> parameters, int parameterIndex) {\n    return normalizeHash(parameters.get(parameterIndex));\n  }\n\n  public static boolean isJSONValid(String jsonInString) {\n    try {\n      final ObjectMapper mapper = new ObjectMapper();\n      mapper.readTree(jsonInString);\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n\n  public static String toHexByteArray(byte[] bytes) {\n    StringBuilder hexValue = new StringBuilder();\n    for (byte aByte : bytes) {\n      hexValue.append(String.format(\"%02x\", aByte));\n    }\n    return hexValue.toString().toLowerCase();\n  }\n\n  public static String toBigHex(String value) {\n    String hexValue = \"\";\n    if (value != null) {\n      try {\n        hexValue = \"0x\" + new BigInteger(value).toString(16);\n      } catch (NumberFormatException e) {\n        LOG.error(\"Failed to convert {} to hex\", value, e);\n      }\n    }\n    return hexValue;\n  }\n}\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ ],
    "importScriptInstances" : [ ]
  } ]
}