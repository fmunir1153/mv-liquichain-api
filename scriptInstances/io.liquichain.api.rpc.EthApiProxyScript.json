{
  "code" : "io.liquichain.api.rpc.EthApiProxyScript",
  "description" : "eth-api proxy json-rpc script",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\r\n\r\nimport java.math.BigInteger;\r\nimport java.io.IOException;\r\nimport java.io.UnsupportedEncodingException;\r\nimport java.util.ArrayList;\r\nimport java.util.Base64;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport javax.ws.rs.ext.*;\r\nimport javax.enterprise.context.ApplicationScoped;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.commons.utils.ParamBean;\r\nimport org.meveo.commons.utils.ParamBeanFactory;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.customEntities.LiquichainApp;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.GsonBuilder;\r\nimport com.google.gson.reflect.TypeToken;\r\n\r\nimport org.apache.commons.lang3.StringEscapeUtils;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\n@ApplicationScoped\r\npublic class EthApiProxyScript extends Script {\r\n\r\n    private static final Logger LOG = LoggerFactory.getLogger(EthApiProxyScript.class);\r\n\r\n    private static final String NOT_IMPLEMENTED_ERROR = \"Feature not yet implemented\";\r\n    private static final String METHOD_NOT_FOUND_ERROR = \"Method not found\";\r\n    private static final String CREATE_WALLET_ERROR = \"Failed to create wallet\";\r\n    private static final String UPDATE_WALLET_ERROR = \"Failed to update wallet\";\r\n    private static final String WALLET_INFO_ERROR = \"Failed to get wallet info\";\r\n    private static final String UNKNOWN_WALLET_ERROR = \"Unknown wallet\";\r\n    private static final String WALLET_EXISTS_ERROR = \"Wallet already exists\";\r\n    private static final String GET_CODE_ERROR = \"Failed to get code\";\r\n    private static final String GET_BALANCE_ERROR = \"Failed to get balance\";\r\n    private static final String TRANSACTION_EXISTS_ERROR = \"Transaction already exists: {}\";\r\n    private static final String INVALID_REQUEST = \"-32600\";\r\n    private static final String INTERNAL_ERROR = \"-32603\";\r\n    private static final String RESOURCE_NOT_FOUND = \"-32001\";\r\n    private static final String TRANSACTION_REJECTED = \"-32003\";\r\n    private static final String METHOD_NOT_FOUND = \"-32601\";\r\n    private static final String PROXY_REQUEST_ERROR =\r\n            \"Proxy request to remote json-rpc endpoint failed\";\r\n\r\n    private String result;\r\n\r\n    private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\r\n    private ParamBean config = paramBeanFactory.getInstance();\r\n    private String APP_NAME = config.getProperty(\"eth.api.appname\", \"licoin\");\r\n    private String fabricUrl = config.getProperty(\"fabric.sdk.url\", \"http://163.172.190.14:3011\");\r\n    private String explorerApiUrl =\r\n            config.getProperty(\"explorer.api.url\", \"https://test-fabric.liquichain.io\");\r\n    private String fabricUsername = config.getProperty(\"fabric.sdk.username\", \"lchainadmin\");\r\n    private String fabricPassword = config.getProperty(\"fabric.sdk.password\", \"L194a1N_!_ .\");\r\n    private String fabricNetworkName = config.getProperty(\"fabric.network.name\", \"test-network\");\r\n    private String besuApiUrl =\r\n            config.getProperty(\"besu.api.url\", \"https://testnet.liquichain.io/rpc\");\r\n\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n\r\n    public String getResult() {\r\n        return result;\r\n    }\r\n\r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n        String method = \"\" + parameters.get(\"method\");\r\n        LOG.info(\"json rpc: {}, parameters:{}\", method, parameters);\r\n        String requestId = \"\" + parameters.get(\"id\");\r\n        switch (method) {\r\n            case \"get_chainId\":\r\n                result = createResponse(requestId, \"0x4c\");\r\n                break;\r\n            case \"eth_sendRawTransaction\":\r\n                result = sendRawTransaction(requestId, parameters);\r\n                break;\r\n            case \"wallet_creation\":\r\n                result = createWallet(requestId, parameters);\r\n                break;\r\n            case \"wallet_update\":\r\n                result = updateWallet(requestId, parameters);\r\n                break;\r\n            case \"wallet_info\":\r\n                result = getWalletInfo(requestId, parameters);\r\n                break;\r\n            case \"wallet_report\":\r\n                result = createErrorResponse(requestId, METHOD_NOT_FOUND, NOT_IMPLEMENTED_ERROR);\r\n                break;\r\n            default:\r\n                result = callEthJsonRpc(requestId, parameters);\r\n                break;\r\n        }\r\n    }\r\n\r\n    public static String hex(byte[] bytes) {\r\n        StringBuilder result = new StringBuilder();\r\n        for (byte aByte : bytes) {\r\n            result.append(String.format(\"%02x\", aByte));\r\n        }\r\n        return result.toString().toLowerCase();\r\n    }\r\n\r\n    private String normalizeHash(String hash) {\r\n        if (hash.startsWith(\"0x\")) {\r\n            return hash.substring(2);\r\n        }\r\n        return hash;\r\n    }\r\n\r\n    private String createResponse(String requestId, String result) {\r\n        String resultFormat = result.startsWith(\"{\") ? \"%s\" : \"\\\"%s\\\"\";\r\n        String response = new StringBuilder()\r\n                .append(\"{\\n\")\r\n                .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\r\n                .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\r\n                .append(\"  \\\"result\\\": \").append(String.format(resultFormat, result)).append(\"\\n\")\r\n                .append(\"}\").toString();\r\n        LOG.debug(\"response: {}\", response);\r\n        return response;\r\n    }\r\n\r\n    private String createErrorResponse(String requestId, String errorCode, String message) {\r\n        String response = new StringBuilder()\r\n                .append(\"{\\n\")\r\n                .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\r\n                .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\r\n                .append(\"  \\\"error\\\": {\\n\")\r\n                .append(\"    \\\"code\\\": \").append(errorCode).append(\",\\n\")\r\n                .append(\"    \\\"message\\\": \\\"\").append(message).append(\"\\\"\\n\")\r\n                .append(\"  }\\n\")\r\n                .append(\"}\").toString();\r\n        return response;\r\n    }\r\n\r\n    private String retrieveHash(Map<String, Object> parameters, int parameterIndex) {\r\n        List<String> params = (List<String>) parameters.get(\"params\");\r\n        LOG.debug(\"params={}\", params);\r\n        String hash = normalizeHash(params.get(parameterIndex));\r\n        LOG.debug(\"hash={}\", hash);\r\n        return hash;\r\n    }\r\n\r\n    private String callProxy(String body) throws IOException, InterruptedException {\r\n        LOG.debug(\"callProxy body={}\", body);\r\n        LOG.debug(\"besuApiUrl={}\", besuApiUrl);\r\n        Client client = ClientBuilder.newClient();\r\n        String response = client.target(besuApiUrl)\r\n                .request(MediaType.APPLICATION_JSON)\r\n                .post(Entity.json(body), String.class);\r\n        LOG.debug(\"callProxy response={}\", response);\r\n        return response;\r\n    }\r\n\r\n    private String callEthJsonRpc(String requestId, Map<String, Object> parameters) {\r\n        String requestBody = new StringBuilder()\r\n                .append(\"{\")\r\n                .append(String.format(\"\\\"id\\\":%s,\", parameters.get(\"id\") + \"\"))\r\n                .append(String.format(\"\\\"jsonrpc\\\":\\\"%s\\\",\", (String) parameters.get(\"jsonrpc\")))\r\n                .append(String.format(\"\\\"method\\\":\\\"%s\\\",\", (String) parameters.get(\"method\")))\r\n                .append(String.format(\"\\\"params\\\":%s\", new Gson().toJson(parameters.get(\"params\"))))\r\n                .append(\"}\")\r\n                .toString();\r\n        try {\r\n            return callProxy(requestBody);\r\n        } catch (Exception e) {\r\n            LOG.error(PROXY_REQUEST_ERROR, e);\r\n            return createErrorResponse(requestId, INTERNAL_ERROR, PROXY_REQUEST_ERROR);\r\n        }\r\n    }\r\n\r\n    private String createWallet(String requestId, Map<String, Object> parameters) {\r\n        List<String> params = (ArrayList<String>) parameters.get(\"params\");\r\n        String name = params.get(0);\r\n        String walletHash = this.retrieveHash(parameters, 1);\r\n        String accountHash = this.retrieveHash(parameters, 2);\r\n        String publicInfo = params.get(3);\r\n        Wallet wallet = null;\r\n\r\n        try {\r\n            wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\r\n            if (wallet != null) {\r\n                return createErrorResponse(requestId, INVALID_REQUEST, WALLET_EXISTS_ERROR);\r\n            }\r\n        } catch (EntityDoesNotExistsException e) {\r\n            // do nothing, we expect wallet to not exist\r\n        }\r\n        wallet = new Wallet();\r\n\r\n        try {\r\n            LiquichainApp app = crossStorageApi\r\n                    .find(defaultRepo, LiquichainApp.class)\r\n                    .by(\"name\", APP_NAME)\r\n                    .getResult();\r\n            wallet.setName(name);\r\n            wallet.setUuid(walletHash);\r\n            wallet.setAccountHash(accountHash);\r\n            wallet.setPublicInfo(publicInfo);\r\n            wallet.setBalance(\"0\");\r\n            wallet.setApplication(app);\r\n            crossStorageApi.createOrUpdate(defaultRepo, wallet);\r\n            return createResponse(requestId, walletHash);\r\n        } catch (Exception e) {\r\n            LOG.error(CREATE_WALLET_ERROR, e);\r\n            return createErrorResponse(requestId, TRANSACTION_REJECTED, CREATE_WALLET_ERROR);\r\n        }\r\n    }\r\n\r\n    private String updateWallet(String requestId, Map<String, Object> parameters) {\r\n        List<String> params = (ArrayList<String>) parameters.get(\"params\");\r\n        String name = params.get(0);\r\n        String walletHash = this.retrieveHash(parameters, 1);\r\n        String publicInfo = params.get(2);\r\n        Wallet wallet = null;\r\n\r\n        try {\r\n            wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\r\n            if (wallet == null) {\r\n                return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\r\n            }\r\n        } catch (EntityDoesNotExistsException e) {\r\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\r\n            return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\r\n        }\r\n\r\n        try {\r\n            wallet.setName(name);\r\n            wallet.setPublicInfo(publicInfo);\r\n            crossStorageApi.createOrUpdate(defaultRepo, wallet);\r\n            return createResponse(requestId, name);\r\n        } catch (Exception e) {\r\n            LOG.error(UPDATE_WALLET_ERROR, e);\r\n            return createErrorResponse(requestId, TRANSACTION_REJECTED, UPDATE_WALLET_ERROR);\r\n        }\r\n    }\r\n\r\n    private String getWalletInfo(String requestId, Map<String, Object> parameters) {\r\n        String walletHash = this.retrieveHash(parameters, 0);\r\n        Wallet wallet = null;\r\n\r\n        try {\r\n            wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\r\n            if (wallet == null) {\r\n                return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\r\n            }\r\n        } catch (EntityDoesNotExistsException e) {\r\n            LOG.error(UNKNOWN_WALLET_ERROR, e);\r\n            return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\r\n        }\r\n\r\n        String response = new StringBuilder()\r\n                .append(\"{\")\r\n                .append(String.format(\"\\\"name\\\":\\\"%s\\\",\", wallet.getName()))\r\n                .append(String.format(\"\\\"publicInfo\\\":%s\",\r\n                        new Gson().toJson(wallet.getPublicInfo())))\r\n                .append(\"}\")\r\n                .toString();\r\n\r\n        return createResponse(requestId, response);\r\n    }\r\n\r\n    private String sendRawTransaction(String requestId, Map<String, Object> parameters) {\r\n        result = callEthJsonRpc(requestId, parameters);\r\n        boolean hasError = result.contains(\"\\\"error\\\"\");\r\n        if (hasError) {\r\n            return result;\r\n        }\r\n        List<String> params = (List<String>) parameters.get(\"params\");\r\n        String data = (String) params.get(0);\r\n        String transactionHash = normalizeHash(Hash.sha3(data));\r\n        try {\r\n            Transaction existingTransaction = crossStorageApi.find(defaultRepo, Transaction.class)\r\n                    .by(\"hexHash\", transactionHash).getResult();\r\n            if (existingTransaction != null) {\r\n                return createErrorResponse(\r\n                        requestId,\r\n                        TRANSACTION_REJECTED,\r\n                        String.format(TRANSACTION_EXISTS_ERROR, transactionHash));\r\n            }\r\n        } catch (Exception e) {\r\n            return createErrorResponse(requestId, RESOURCE_NOT_FOUND, e.getMessage());\r\n        }\r\n\r\n        RawTransaction rawTransaction = TransactionDecoder.decode(data);\r\n        LOG.debug(\"to:{} , value:{}\", rawTransaction.getTo(), rawTransaction.getValue());\r\n\r\n        if (rawTransaction instanceof SignedRawTransaction) {\r\n            SignedRawTransaction signedTransaction = (SignedRawTransaction) rawTransaction;\r\n            Sign.SignatureData signatureData = signedTransaction.getSignatureData();\r\n            try {\r\n                String v = hex(signatureData.getV());\r\n                String s = hex(signatureData.getS());\r\n                String r = hex(signatureData.getR());\r\n                LOG.debug(\"from:{} chainId:{} , v:{} , r:{} , s:{}\",\r\n                        signedTransaction.getFrom(), signedTransaction.getChainId(), v, r, s);\r\n                String extraData = rawTransaction.getData();\r\n                if (extraData == null || extraData.isEmpty()) {\r\n                    extraData = \"{\\\"type\\\":\\\"transfer\\\",\\\"description\\\":\\\"Transfer coins\\\"}\";\r\n                }\r\n                Transaction transaction = new Transaction();\r\n                transaction.setHexHash(transactionHash);\r\n                transaction.setFromHexHash(normalizeHash(signedTransaction.getFrom()));\r\n                transaction.setToHexHash(normalizeHash(rawTransaction.getTo()));\r\n                transaction.setNonce(\"\" + rawTransaction.getNonce());\r\n                transaction.setGasPrice(\"\" + rawTransaction.getGasPrice());\r\n                transaction.setGasLimit(\"\" + rawTransaction.getGasLimit());\r\n                transaction.setValue(\"\" + rawTransaction.getValue());\r\n                transaction.setSignedHash(data);\r\n                transaction.setData(extraData);\r\n                transaction.setCreationDate(java.time.Instant.now());\r\n                transaction.setV(v);\r\n                transaction.setS(s);\r\n                transaction.setR(r);\r\n                String uuid = crossStorageApi.createOrUpdate(defaultRepo, transaction);\r\n                LOG.debug(\"Created transaction on DB with uuid: {}\", uuid);\r\n            } catch (Exception e) {\r\n                return createErrorResponse(requestId, TRANSACTION_REJECTED, e.getMessage());\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}