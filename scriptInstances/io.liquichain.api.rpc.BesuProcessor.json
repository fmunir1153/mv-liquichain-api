{
  "code" : "io.liquichain.api.rpc.BesuProcessor",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport static io.liquichain.api.rpc.EthApiConstants.*;\n\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.ws.rs.client.*;\nimport javax.ws.rs.core.*;\nimport javax.ws.rs.ext.*;\nimport javax.enterprise.context.ApplicationScoped;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.model.customEntities.Transaction;\n\nimport com.google.gson.Gson;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport org.web3j.crypto.*;\nimport org.web3j.utils.*;\n\nimport io.liquichain.api.rpc.BlockchainProcessor;\n\n@ApplicationScoped\npublic class BesuProcessor extends BlockchainProcessor {\n    private static final Logger LOG = LoggerFactory.getLogger(BesuProcessor.class);\n\n    private String BESU_API_URL = config.getProperty(\"besu.api.url\", \"https://testnet.liquichain.io/rpc\");\n\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        String method = \"\" + parameters.get(\"method\");\n        LOG.info(\"json rpc: {}, parameters:{}\", method, parameters);\n        String requestId = \"\" + parameters.get(\"id\");\n        switch (method) {\n            case \"get_chainId\":\n                result = createResponse(requestId, \"0x4c\");\n                break;\n            case \"eth_sendRawTransaction\":\n                result = sendRawTransaction(requestId, parameters);\n                break;\n            default:\n                result = callEthJsonRpc(requestId, parameters);\n                break;\n        }\n    }\n\n    private String callProxy(String body) throws IOException, InterruptedException {\n        LOG.info(\"callProxy body={}\", body);\n        LOG.info(\"BESU_API_URL={}\", BESU_API_URL);\n        Client client = ClientBuilder.newClient();\n        String response = client.target(BESU_API_URL)\n                                .request(MediaType.APPLICATION_JSON)\n                                .post(Entity.json(body), String.class);\n        LOG.info(\"callProxy response={}\", response);\n        return response;\n    }\n\n    private String callEthJsonRpc(String requestId, Map<String, Object> parameters) {\n        String requestBody = new StringBuilder()\n                .append(\"{\")\n                .append(String.format(\"\\\"id\\\":%s,\", parameters.get(\"id\") + \"\"))\n                .append(String.format(\"\\\"jsonrpc\\\":\\\"%s\\\",\", (String) parameters.get(\"jsonrpc\")))\n                .append(String.format(\"\\\"method\\\":\\\"%s\\\",\", (String) parameters.get(\"method\")))\n                .append(String.format(\"\\\"params\\\":%s\", new Gson().toJson(parameters.get(\"params\"))))\n                .append(\"}\")\n                .toString();\n        try {\n            return callProxy(requestBody);\n        } catch (Exception e) {\n            LOG.error(PROXY_REQUEST_ERROR, e);\n            return createErrorResponse(requestId, INTERNAL_ERROR, PROXY_REQUEST_ERROR);\n        }\n    }\n\n    private String sendRawTransaction(String requestId, Map<String, Object> parameters) {\n        result = callEthJsonRpc(requestId, parameters);\n        boolean hasError = result.contains(\"\\\"error\\\"\");\n        if (hasError) {\n            return result;\n        }\n        List<String> params = (List<String>) parameters.get(\"params\");\n        String data = (String) params.get(0);\n        String transactionHash = normalizeHash(Hash.sha3(data));\n        try {\n            Transaction existingTransaction = crossStorageApi\n                    .find(defaultRepo, Transaction.class)\n                    .by(\"hexHash\", transactionHash).getResult();\n            if (existingTransaction != null) {\n                return createErrorResponse(\n                        requestId,\n                        TRANSACTION_REJECTED,\n                        String.format(TRANSACTION_EXISTS_ERROR, transactionHash));\n            }\n        } catch (Exception e) {\n            return createErrorResponse(requestId, RESOURCE_NOT_FOUND, e.getMessage());\n        }\n\n        RawTransaction rawTransaction = TransactionDecoder.decode(data);\n        LOG.info(\"to:{} , value:{}\", rawTransaction.getTo(), rawTransaction.getValue());\n\n        if (rawTransaction instanceof SignedRawTransaction) {\n            SignedRawTransaction signedTransaction = (SignedRawTransaction) rawTransaction;\n            Sign.SignatureData signatureData = signedTransaction.getSignatureData();\n            try {\n                String v = toHex(signatureData.getV());\n                String s = toHex(signatureData.getS());\n                String r = toHex(signatureData.getR());\n                LOG.info(\"from:{} chainId:{} , v:{} , r:{} , s:{}\",\n                         signedTransaction.getFrom(), signedTransaction.getChainId(), v, r, s);\n                String extraData = rawTransaction.getData();\n                if (extraData == null || extraData.isEmpty()) {\n                    extraData = \"{\\\"type\\\":\\\"transfer\\\",\\\"description\\\":\\\"Transfer coins\\\"}\";\n                }\n                Transaction transaction = new Transaction();\n                transaction.setHexHash(transactionHash);\n                transaction.setFromHexHash(normalizeHash(signedTransaction.getFrom()));\n                transaction.setToHexHash(normalizeHash(rawTransaction.getTo()));\n                transaction.setNonce(\"\" + rawTransaction.getNonce());\n                transaction.setGasPrice(\"\" + rawTransaction.getGasPrice());\n                transaction.setGasLimit(\"\" + rawTransaction.getGasLimit());\n                transaction.setValue(\"\" + rawTransaction.getValue());\n                transaction.setSignedHash(data);\n                transaction.setData(extraData);\n                transaction.setCreationDate(java.time.Instant.now());\n                transaction.setV(v);\n                transaction.setS(s);\n                transaction.setR(r);\n                String uuid = crossStorageApi.createOrUpdate(defaultRepo, transaction);\n                LOG.info(\"Created transaction on DB with uuid: {}\", uuid);\n            } catch (Exception e) {\n                return createErrorResponse(requestId, TRANSACTION_REJECTED, e.getMessage());\n            }\n        }\n        return result;\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}