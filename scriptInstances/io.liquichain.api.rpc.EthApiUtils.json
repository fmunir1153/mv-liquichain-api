{
  "code" : "io.liquichain.api.rpc.EthApiUtils",
  "inputs" : [ ],
  "outputs" : [ ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport java.math.BigInteger;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.meveo.service.script.Script;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class EthApiUtils extends Script {\n  private static final Logger LOG = LoggerFactory.getLogger(EthApiUtils.class);\n\n  public static String createResponse(String requestId, String result) {\n    String resultFormat = result.startsWith(\"{\") ? \"%s\" : \"\\\"%s\\\"\";\n    String response = new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"result\\\": \").append(String.format(resultFormat, result)).append(\"\\n\")\n        .append(\"}\").toString();\n    LOG.debug(\"response: {}\", response);\n    return response;\n  }\n\n  public static String createErrorResponse(String requestId, String errorCode, String message) {\n    String response = new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"error\\\": {\\n\")\n        .append(\"    \\\"code\\\": \").append(errorCode).append(\",\\n\")\n        .append(\"    \\\"message\\\": \\\"\").append(message).append(\"\\\"\\n\")\n        .append(\"  }\\n\")\n        .append(\"}\").toString();\n    LOG.debug(\"error response: {}\", response);\n    return response;\n  }\n\n  public static String normalizeHash(String hash) {\n    if (hash.startsWith(\"0x\")) {\n      return hash.substring(2);\n    }\n    return hash;\n  }\n\n  public static String retrieveHash(List<String> parameters, int parameterIndex) {\n    return normalizeHash(parameters.get(parameterIndex));\n  }\n\n  public static boolean isJSONValid(String jsonInString) {\n    try {\n      final ObjectMapper mapper = new ObjectMapper();\n      mapper.readTree(jsonInString);\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n\n  public static String toHex(byte[] bytes) {\n    StringBuilder hexValue = new StringBuilder();\n    for (byte aByte : bytes) {\n      hexValue.append(String.format(\"%02x\", aByte));\n    }\n    return hexValue.toString().toLowerCase();\n  }\n\n  public static String toBigHex(String value) {\n    String hexValue = \"\";\n    if (value != null) {\n      try {\n        hexValue = \"0x\" + new BigInteger(value).toString(16);\n      } catch (NumberFormatException e) {\n        LOG.error(\"Failed to convert {} to hex\", value, e);\n      }\n    }\n    return hexValue;\n  }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}