{
  "code" : "io.liquichain.api.rpc.BlockchainProcessor",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport org.meveo.service.script.Script;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.math.BigInteger;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.web3j.crypto.*;\n\npublic class BlockchainProcessor extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(BlockchainProcessor.class);\n    private static final Map<String, Object[]> TRANSACTION_HOOKS = new HashMap<>();\n\n    protected String result;\n\n    public String getResult(){\n        return this.result;\n    };\n\n    public static boolean addTransactionHook(String regex, Script script) {\n        boolean isHookAdded = true;\n        String key = regex + \":\" + script.getClass().getName();\n        LOG.info(\"addTransactionHook key: {}\", key);\n        isHookAdded = !TRANSACTION_HOOKS.containsKey(key);\n        if (isHookAdded) {\n            Pattern pattern = Pattern.compile(regex);\n            TRANSACTION_HOOKS.put(key, new Object[]{pattern, script});\n        }\n        return isHookAdded;\n    }\n\n    public static void processTransactionHooks(String transactionHash, SignedRawTransaction transaction) {\n        try {\n            String data = new String(new BigInteger(transaction.getData(), 16).toByteArray());\n            LOG.info(\"try matching {} hooks\", TRANSACTION_HOOKS.size());\n            TRANSACTION_HOOKS.forEach((String key, Object[] hook) -> {\n                LOG.info(\"try hook {} on {}\", key, data);\n                Pattern pattern = (Pattern) hook[0];\n                Script script = (Script) hook[1];\n                Matcher matcher = pattern.matcher(data);\n                if (matcher.find()) {\n                    LOG.info(\" hook {} matched\", key);\n                    Map<String, Object> context = new HashMap<>();\n                    context.put(\"transaction\", transaction);\n                    context.put(\"transactionHash\", transactionHash);\n                    context.put(\"matcher\", matcher);\n                    try {\n                        script.execute(context);\n                        if (context.containsKey(\"result\")) {\n                            LOG.info(\" hook result:{} \", context.get(\"result\"));\n                        }\n                    } catch (Exception e) {\n                        LOG.error(\"error while invoking transaction hook {}\", script, e);\n                    }\n                } else {\n                    LOG.info(\" hook {} matched\", key);\n                }\n            });\n            if (data.contains(\"orderId\")) {\n                LOG.info(\"detected orderId:{}\", data);\n            }\n        } catch (Exception ex) {\n            LOG.info(\"error while detecting order:{}\", ex);\n        }\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}