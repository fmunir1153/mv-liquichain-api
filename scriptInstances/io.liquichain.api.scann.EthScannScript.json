{
  "code" : "io.liquichain.api.scann.EthScannScript",
  "description" : "etherscan service",
  "inputs" : [ {
    "name" : "action",
    "type" : "String"
  }, {
    "name" : "address",
    "type" : "String"
  }, {
    "name" : "offset",
    "type" : "int"
  }, {
    "name" : "limit",
    "type" : "int"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.scann;\n\n\nimport java.util.Map;\nimport java.util.stream.Collectors;\nimport java.util.List;\nimport java.util.Comparator;\nimport java.util.HashMap;\nimport java.util.ArrayList;\nimport java.math.BigInteger;\n\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.customEntities.Transaction;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.storage.RepositoryService;\nimport org.meveo.api.persistence.CrossStorageApi;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\n\npublic class EthScannScript extends Script {\n\n    private static final Logger LOG = LoggerFactory.getLogger(EthScannScript.class);\n\n    private CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\n\n    private String result;\n\n    private String action;\n    private String address;\n    private int offset;\n    private int limit = 10;\n\n    public String getResult() {\n        return result;\n    }\n\n    public void setAction(String action) {\n        this.action = action;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public void setOffset(int offset) {\n        this.offset = offset;\n    }\n\n    public void setLimit(int limit) {\n        this.limit = limit;\n    }\n\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        if (address.startsWith(\"0x\")) {\n            address = address.substring(2);\n        }\n        switch (action) {\n            case \"balance\":\n                result = getBalance(address);\n                break;\n            case \"balancehistory\":\n                result = getTransactionList(address);\n                break;\n        }\n    }\n\n    public static boolean isJSONValid(String jsonInString) {\n        try {\n            final ObjectMapper mapper = new ObjectMapper();\n            mapper.readTree(jsonInString);\n            return true;\n        } catch (Exception e) {\n            return false;\n        }\n    }\n\n    public static String hex(byte[] bytes) {\n        StringBuilder result = new StringBuilder();\n        for (byte aByte : bytes) {\n            result.append(String.format(\"%02x\", aByte));\n        }\n        return result.toString();\n    }\n\n    private String toBigHex(String i) {\n        return \"0x\" + new BigInteger(i).toString(16).toLowerCase();\n    }\n\n    private String createResponse(String status, String message, String result) {\n        String res = \"{\\n\";\n        res += \"  \\\"status\\\": \" + 1 + \",\\n\";\n        res += \" \\\"message\\\" : \\\"\" + message + \"\\\",\\n\";\n        res += \" \\\"result\\\" : \" + result + \"\\n\";\n        res += \"}\";\n        LOG.info(\"response:{}\", res);\n        return res;\n    }\n\n    private String getBalance(String hash) {\n        try {\n            Wallet wallet = crossStorageApi.find(defaultRepo, Wallet.class).by(\"hexHash\", hash).getResult();\n            return createResponse(\"1\", \"OK-Missing/Invalid API Key, rate limit of 1/5sec applied\",\n                                  \"\\\"0x\" + new BigInteger(wallet.getBalance()).toString(16)) + \"\\\"\";\n        } catch (Exception e) {\n            return createResponse(\"0\", \"Resource not found\", e.getMessage());\n        }\n    }\n\n    public String getTransactionList(String hash) {\n        ObjectMapper mapper = new ObjectMapper();\n        List<Transaction> transactions = crossStorageApi.find(defaultRepo, Transaction.class)\n                                                        .by(\"fromHexHash\", hash)\n                                                        .limit(offset + limit)\n                                                        .getResults();\n        List<Transaction> transactionsTo = crossStorageApi.find(defaultRepo, Transaction.class)\n                                                          .by(\"toHexHash\", hash)\n                                                          .limit(offset + limit)\n                                                          .getResults();\n        for (Transaction transac : transactionsTo) {\n            //we reverse the amount for transfer received\n            BigInteger amount = new BigInteger(transac.getValue()).negate();\n            transac.setValue(amount.toString());\n        }\n        transactions.addAll(transactionsTo);\n        //we order by date descending\n        transactions = transactions.stream()\n                                   .sorted(Comparator.comparing(Transaction::getCreationDate).reversed())\n                                   .collect(Collectors.toList());\n        //check offset and limit\n        if (transactions.size() <= offset) {\n            transactions = new ArrayList<>();\n        } else {\n            transactions = transactions.subList(offset, Math.min(offset + limit, transactions.size()));\n        }\n        String result = \"[\";\n        String sep = \"\";\n        for (Transaction transac : transactions) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"blockNumber\", transac.getBlockNumber());\n            map.put(\"timeStamp\", transac.getCreationDate());\n            map.put(\"hash\", transac.getHexHash());\n            map.put(\"nonce\", this.toBigHex(transac.getNonce()));\n            map.put(\"blockHash\", transac.getBlockHash());\n            map.put(\"transactionIndex\", transac.getTransactionIndex());\n            map.put(\"from\", \"0x\" + transac.getFromHexHash());\n            map.put(\"to\", \"0x\" + transac.getToHexHash());\n            map.put(\"value\", \"0x\" + (new BigInteger(transac.getValue())).toString(16));\n            map.put(\"data\", transac.getData());\n            map.put(\"gas\", \"0\");\n            map.put(\"gasPrice\", \"0x\" + transac.getGasPrice());\n            map.put(\"isError\", \"0\");\n            map.put(\"txreceipt_status\", \"1\");\n            map.put(\"input\", \"0x\");\n            map.put(\"contractAddress\", \"\");\n            map.put(\"cumulativeGasUsed\", \"\");\n            map.put(\"gasUsed\", \"\");\n            map.put(\"confirmations\", \"1\");\n            try {\n                result += sep + mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);\n            } catch (JsonProcessingException e) {\n                e.printStackTrace();\n            }\n            sep = \",\";\n        }\n        result += \"]\";\n        return createResponse(\"1\", \"OK\", result);\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.web3j",
    "artifactId" : "crypto",
    "version" : "4.8.9",
    "coordinates" : "org.web3j:crypto:4.8.9"
  } ],
  "importScriptInstances" : [ ]
}