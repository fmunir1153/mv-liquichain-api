{
  "code" : "io.liquichain.api.rpc.EthApiScript",
  "description" : "eth rpc api",
  "inputs" : [ ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport java.math.BigInteger;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.api.exception.EntityDoesNotExistsException;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.commons.utils.ParamBean;\nimport org.meveo.commons.utils.ParamBeanFactory;\nimport org.meveo.model.customEntities.LiquichainApp;\nimport org.meveo.model.customEntities.Transaction;\nimport org.meveo.model.customEntities.VerifiedEmail;\nimport org.meveo.model.customEntities.VerifiedPhoneNumber;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.service.storage.RepositoryService;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport org.web3j.crypto.*;\n\nimport io.liquichain.core.BlockForgerScript;\n\n\npublic class EthApiScript extends Script {\n  private static final Logger LOG = LoggerFactory.getLogger(EthApiScript.class);\n  private static final Map<String, Object[]> TRANSACTION_HOOKS = new HashMap<>();\n\n  private static final String NOT_IMPLEMENTED_ERROR = \"Feature not yet implemented\";\n  private static final String CREATE_WALLET_ERROR = \"Failed to create wallet\";\n  private static final String UPDATE_WALLET_ERROR = \"Failed to update wallet\";\n  private static final String UNKNOWN_WALLET_ERROR = \"Unknown wallet\";\n  private static final String UNKNOWN_APPLICATION_ERROR = \"Unknown application\";\n  private static final String WALLET_EXISTS_ERROR = \"Wallet already exists\";\n  private static final String EMAIL_EXISTS_ERROR = \"Email address: %s, already exists\";\n  private static final String PHONE_NUMBER_EXISTS_ERROR = \"Phone number: %s, already exists\";\n  private static final String TRANSACTION_EXISTS_ERROR = \"Transaction already exists: {}\";\n  private static final String INVALID_REQUEST = \"-32600\";\n  private static final String INTERNAL_ERROR = \"-32603\";\n  private static final String RESOURCE_NOT_FOUND = \"-32001\";\n  private static final String TRANSACTION_REJECTED = \"-32003\";\n  private static final String METHOD_NOT_FOUND = \"-32601\";\n\n  private static final String SAMPLE_BLOCK = \"{\" + \"\\\"difficulty\\\":\\\"0x5\\\",\"\n      + \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\"\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\"\n      + \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\"\n      + \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" + \"\\\"number\\\":\\\"0x1b4\\\",\"\n      + \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\"\n      + \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\"\n      + \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\"\n      + \"\\\"size\\\":\\\"0x260\\\",\"\n      + \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\"\n      + \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" + \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" + \"\\\"transactions\\\":[\"\n      + \"],\"\n      + \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\"\n      + \"\\\"uncles\\\":[  \" + \"]}\";\n\n\n  private final CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n  private final RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n  private final Repository defaultRepo = repositoryService.findDefaultRepository();\n  private ParamBeanFactory paramBeanFactory = getCDIBean(ParamBeanFactory.class);\n  private ParamBean config = paramBeanFactory.getInstance();\n\n  private String APP_NAME = config.getProperty(\"eth.api.appname\", \"licoin\");\n\n  private String result;\n\n  @Override\n  public void execute(Map<String, Object> parameters) throws BusinessException {\n    String method = \"\" + parameters.get(\"method\");\n    LOG.info(\"json rpc: {}, parameters:{}\", method, parameters);\n    String requestId = \"\" + parameters.get(\"id\");\n    switch (method) {\n      case \"eth_call\":\n        result = createResponse(requestId, \"0x\");\n        break;\n      case \"eth_chainId\":\n        result = createResponse(requestId, \"0x4c\");\n        break;\n      case \"web3_clientVersion\":\n        result = createResponse(requestId, \"liquichainCentral\");\n        break;\n      case \"net_version\":\n        result = createResponse(requestId, \"7\");\n        break;\n      case \"eth_blockNumber\":\n        result = createResponse(requestId, \"0x\" + Long.toHexString(BlockForgerScript.blockHeight));\n        break;\n      case \"eth_getBalance\":\n        result = getBalance(requestId, parameters);\n        break;\n      case \"eth_getTransactionCount\":\n        result = getTransactionCount(requestId, parameters);\n        break;\n      case \"eth_getBlockByNumber\":\n        result = createResponse(requestId, SAMPLE_BLOCK);\n        break;\n      case \"eth_estimateGas\":\n        result = createResponse(requestId, \"0x0\");\n        break;\n      case \"eth_gasPrice\":\n        result = createResponse(requestId, \"0x0\");\n        break;\n      case \"eth_getCode\":\n        result = getCode(requestId, parameters);\n        break;\n      case \"eth_sendRawTransaction\":\n        result = sendRawTransaction(requestId, parameters);\n        break;\n      case \"eth_getTransactionByHash\":\n        result = getTransactionByHash(requestId, parameters);\n        break;\n      case \"wallet_creation\":\n        result = createWallet(requestId, parameters);\n        break;\n      case \"wallet_update\":\n        result = updateWallet(requestId, parameters);\n        break;\n      case \"wallet_info\":\n        result = getWalletInfo(requestId, parameters);\n        break;\n      case \"wallet_report\":\n        result = createResponse(requestId, \"wallet reported\");\n        break;\n      default:\n        result = createErrorResponse(requestId, METHOD_NOT_FOUND, NOT_IMPLEMENTED_ERROR);\n        break;\n    }\n  }\n\n  public String getResult() {\n    return result;\n  }\n\n  private String createResponse(String requestId, String result) {\n    String resultFormat = result.startsWith(\"{\") ? \"%s\" : \"\\\"%s\\\"\";\n    String response = new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"result\\\": \").append(String.format(resultFormat, result)).append(\"\\n\")\n        .append(\"}\").toString();\n    LOG.debug(\"response: {}\", response);\n    return response;\n  }\n\n  private String createErrorResponse(String requestId, String errorCode, String message) {\n    return new StringBuilder()\n        .append(\"{\\n\")\n        .append(\"  \\\"id\\\": \").append(requestId).append(\",\\n\")\n        .append(\"  \\\"jsonrpc\\\": \\\"2.0\\\",\\n\")\n        .append(\"  \\\"error\\\": {\\n\")\n        .append(\"    \\\"code\\\": \").append(errorCode).append(\",\\n\")\n        .append(\"    \\\"message\\\": \\\"\").append(message).append(\"\\\"\\n\")\n        .append(\"  }\\n\")\n        .append(\"}\").toString();\n  }\n\n  private String normalizeHash(String hash) {\n    if (hash.startsWith(\"0x\")) {\n      return hash.substring(2);\n    }\n    return hash;\n  }\n\n  private String retrieveHash(List<String> parameters, int parameterIndex) {\n    return normalizeHash(parameters.get(parameterIndex));\n  }\n\n  public static boolean isJSONValid(String jsonInString) {\n    try {\n      final ObjectMapper mapper = new ObjectMapper();\n      mapper.readTree(jsonInString);\n      return true;\n    } catch (Exception e) {\n      return false;\n    }\n  }\n\n  public static String hex(byte[] bytes) {\n    StringBuilder hexValue = new StringBuilder();\n    for (byte aByte : bytes) {\n      hexValue.append(String.format(\"%02x\", aByte));\n    }\n    return hexValue.toString().toLowerCase();\n  }\n\n  private String toBigHex(String value) {\n    String hexValue = \"\";\n    if (value != null) {\n      try {\n        hexValue = \"0x\" + new BigInteger(value).toString(16);\n      } catch (NumberFormatException e) {\n        LOG.error(\"Failed to convert to hex {}\", value, e);\n      }\n    }\n    return hexValue;\n  }\n\n  public static boolean addTransactionHook(String regex, Script script) {\n    String key = regex + \":\" + script.getClass().getName();\n    LOG.info(\"addTransactionHook key:{}\", key);\n    boolean result = true;\n    result = !TRANSACTION_HOOKS.containsKey(key);\n    if (result == true) {\n      Pattern pattern = Pattern.compile(regex);\n      TRANSACTION_HOOKS.put(key, new Object[] {pattern, script});\n    }\n    return result;\n  }\n\n  private void processTransactionHooks(SignedRawTransaction transaction, String transactionHash) {\n    try {\n      String data = new String(new BigInteger(transaction.getData(), 16).toByteArray());\n      LOG.info(\"try matching {} hooks\", TRANSACTION_HOOKS.size());\n      TRANSACTION_HOOKS.forEach((String key, Object[] tuple) -> {\n        LOG.info(\"try hook {} on {}\", key, data);\n        Pattern pattern = (Pattern) tuple[0];\n        Script script = (Script) tuple[1];\n        Matcher matcher = pattern.matcher(data);\n        if (matcher.find()) {\n          LOG.info(\" hook {} matched\", key);\n          Map<String, Object> context = new HashMap<>();\n          context.put(\"transaction\", transaction);\n          context.put(\"transactionHash\", transactionHash);\n          context.put(\"matcher\", matcher);\n          try {\n            script.execute(context);\n            if (context.containsKey(\"result\")) {\n              LOG.info(\" hook result:{} \", context.get(\"result\"));\n            }\n          } catch (Exception e) {\n            LOG.error(\"error while invoking transaction hook {}\", script, e);\n          }\n        } else {\n          LOG.info(\" hook {} matched\", key);\n        }\n      });\n      if (data.contains(\"orderId\")) {\n        LOG.info(\"detected orderId:{}\", data);\n      }\n    } catch (Exception ex) {\n      LOG.info(\"error while detecting order:{}\", ex);\n    }\n  }\n\n  private String getTransactionByHash(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String hash = retrieveHash(params, 0);\n    LOG.info(\"lookup transaction hexHash={}\", hash);\n\n    try {\n      Transaction transaction =\n          crossStorageApi.find(defaultRepo, Transaction.class).by(\"hexHash\", hash).getResult();\n      String transactionDetails = \"{\\n\";\n      transactionDetails += \"\\\"blockHash\\\": \\\"0x\" + transaction.getBlockHash() + \"\\\",\\n\";\n      transactionDetails +=\n          \"\\\"blockNumber\\\": \\\"\" + toBigHex(transaction.getBlockNumber()) + \"\\\",\\n\";\n      transactionDetails += \"\\\"from\\\": \\\"0x\" + transaction.getFromHexHash() + \"\\\",\\n\";\n      transactionDetails += \"\\\"gas\\\": \\\"\" + toBigHex(transaction.getGasLimit()) + \"\\\",\\n\";\n      transactionDetails += \"\\\"gasPrice\\\": \\\"\" + toBigHex(transaction.getGasPrice()) + \"\\\",\\n\";\n      transactionDetails += \"\\\"hash\\\": \\\"\" + hash + \"\\\",\\n\";\n      transactionDetails += \"\\\"input\\\": \\\"\\\",\\n\";\n      transactionDetails += \"\\\"nonce\\\": \\\"\" + toBigHex(transaction.getNonce()) + \"\\\",\\n\";\n      if (transaction.getData() != null) {\n        if (isJSONValid(transaction.getData())) {\n          transactionDetails += \"\\\"data\\\": \" + transaction.getData() + \",\\n\";\n        } else {\n          transactionDetails += \"\\\"data\\\": \\\"\" + transaction.getData() + \"\\\",\\n\";\n        }\n      }\n      transactionDetails += \"\\\"r\\\": \\\"\" + transaction.getR() + \"\\\",\\n\";\n      transactionDetails += \"\\\"s\\\": \\\"\" + transaction.getS() + \"\\\",\\n\";\n      transactionDetails += \"\\\"to\\\": \\\"0x\" + transaction.getToHexHash() + \"\\\",\\n\";\n      transactionDetails +=\n          \"\\\"transactionIndex\\\": \\\"0x\" + toBigHex(transaction.getTransactionIndex() + \"\") + \"\\\",\";\n      transactionDetails += \"\\\"v\\\": \\\"\" + transaction.getV() + \"\\\",\";\n      transactionDetails += \"\\\"value\\\": \\\"\" + toBigHex(transaction.getValue()) + \"\\\"\\n\";\n      transactionDetails += \"}\";\n      LOG.info(\"res={}\" + transactionDetails);\n      return createResponse(requestId, transactionDetails);\n    } catch (Exception e) {\n      e.printStackTrace();\n      return createErrorResponse(requestId, RESOURCE_NOT_FOUND, \"Resource not found\");\n    }\n  }\n\n  private String sendRawTransaction(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String transactionData = params.get(0);\n    String transactionHash = normalizeHash(Hash.sha3(transactionData));\n    Transaction existingTransaction = null;\n    result = \"0x0\";\n    try {\n      existingTransaction = crossStorageApi\n          .find(defaultRepo, Transaction.class).by(\"hexHash\", transactionHash).getResult();\n    } catch (Exception e) {\n      // do nothing, we want transaction to be unique\n    }\n    if (existingTransaction != null) {\n      return createErrorResponse(requestId, INVALID_REQUEST, TRANSACTION_EXISTS_ERROR);\n    }\n\n    RawTransaction rawTransaction = TransactionDecoder.decode(transactionData);\n\n    if (rawTransaction instanceof SignedRawTransaction) {\n      SignedRawTransaction signedResult = (SignedRawTransaction) rawTransaction;\n      Sign.SignatureData signatureData = signedResult.getSignatureData();\n      try {\n        LOG.info(\"from:{} chainedId:{}\", signedResult.getFrom(), signedResult.getChainId());\n        Transaction transaction = new Transaction();\n        transaction.setHexHash(transactionHash);\n        transaction.setFromHexHash(normalizeHash(signedResult.getFrom()));\n        transaction.setToHexHash(normalizeHash(rawTransaction.getTo()));\n        transaction.setNonce(\"\" + rawTransaction.getNonce());\n        transaction.setGasPrice(\"\" + rawTransaction.getGasPrice());\n        transaction.setGasLimit(\"\" + rawTransaction.getGasLimit());\n        transaction.setValue(\"\" + rawTransaction.getValue());\n        if (rawTransaction.getData() == null || rawTransaction.getData().isEmpty()) {\n          transaction.setData(\"{\\\"type\\\":\\\"transfer\\\"}\");\n        } else {\n          transaction.setData(\"\" + rawTransaction.getData());\n        }\n        transaction.setSignedHash(transactionData);\n        transaction.setCreationDate(java.time.Instant.now());\n        transaction.setV(hex(signatureData.getV()));\n        transaction.setS(hex(signatureData.getS()));\n        transaction.setR(hex(signatureData.getR()));\n        LOG.info(\"transaction:{}\", transaction);\n        String uuid = crossStorageApi.createOrUpdate(defaultRepo, transaction);\n        transferValue(transaction, rawTransaction.getValue());\n        result = \"0x\" + transactionHash;\n        LOG.info(\"created transaction with uuid:{}\", uuid);\n        if (rawTransaction.getData() != null && rawTransaction.getData().length() > 0) {\n          processTransactionHooks(signedResult, transaction.getHexHash());\n        }\n      } catch (Exception e) {\n        return createErrorResponse(requestId, TRANSACTION_REJECTED, e.getMessage());\n      }\n    }\n    return createResponse(requestId, result);\n  }\n\n  private void transferValue(Transaction transaction, BigInteger value) throws BusinessException {\n    String message = \"transfer error\";\n    try {\n      message = \"cannot find origin wallet\";\n      Wallet originWallet =\n          crossStorageApi.find(defaultRepo, transaction.getFromHexHash(), Wallet.class);\n      message = \"cannot find destination wallet\";\n      crossStorageApi.find(defaultRepo, transaction.getToHexHash(), Wallet.class);\n      message = \"insufficient balance\";\n      BigInteger originBalance = new BigInteger(originWallet.getBalance());\n      LOG.info(\"originWallet 0x{} old balance:{}\", transaction.getFromHexHash(),\n          originWallet.getBalance());\n      if (value.compareTo(originBalance) <= 0) {\n        BlockForgerScript.addTransaction(transaction);\n      } else {\n        throw new BusinessException(\"insufficient balance\");\n      }\n    } catch (Exception e) {\n      throw new BusinessException(message);\n    }\n  }\n\n  private String getTransactionCount(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String transactionHash = retrieveHash(params, 0);\n    try {\n      int nbTransaction = (crossStorageApi.find(defaultRepo, Transaction.class)\n          .by(\"fromHexHash\", transactionHash)\n          .getResults()).size();\n      return createResponse(requestId, toBigHex(nbTransaction + \"\"));\n    } catch (Exception e) {\n      return createResponse(requestId, \"0x0\");\n    }\n  }\n\n  private String getCode(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String address = retrieveHash(params, 0);\n    try {\n      Wallet wallet =\n          crossStorageApi.find(defaultRepo, address, Wallet.class);\n      LOG.info(\"getCode wallet.application.uuid={}\", wallet.getApplication().getUuid());\n      return createResponse(requestId, \"0x\" + wallet.getApplication().getUuid());\n    } catch (Exception e) {\n      LOG.error(\"Wallet address {} not found\", address, e);\n      return createErrorResponse(requestId, RESOURCE_NOT_FOUND, \"Address not found\");\n    }\n  }\n\n  private String getBalance(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String address = retrieveHash(params, 0);\n    try {\n      Wallet wallet = crossStorageApi.find(defaultRepo, address, Wallet.class);\n      return createResponse(requestId, toBigHex(wallet.getBalance()));\n    } catch (Exception e) {\n\n      return createErrorResponse(requestId, RESOURCE_NOT_FOUND, \"Resource not found\");\n    }\n  }\n\n  public String createWallet(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String name = params.get(0);\n    String walletHash = retrieveHash(params, 1);\n    String accountHash = retrieveHash(params, 2);\n    String publicInfo = params.get(3);\n\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash, Wallet.class);\n    } catch (EntityDoesNotExistsException e) {\n      // do nothing, we want wallet to be unique\n    }\n    if (wallet != null) {\n      return createErrorResponse(requestId, INVALID_REQUEST, WALLET_EXISTS_ERROR);\n    } else {\n      wallet = new Wallet();\n    }\n    LiquichainApp app = null;\n    try {\n      app =\n          crossStorageApi.find(defaultRepo, LiquichainApp.class).by(\"name\", APP_NAME).getResult();\n    } catch (Exception e) {\n      LOG.error(UNKNOWN_APPLICATION_ERROR, e);\n      return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_APPLICATION_ERROR);\n    }\n    wallet.setUuid(walletHash);\n    wallet.setName(name);\n    wallet.setAccountHash(accountHash);\n    wallet.setPublicInfo(publicInfo);\n    wallet.setBalance(\"0\");\n    wallet.setApplication(app);\n    try {\n      String savedHash = crossStorageApi.createOrUpdate(defaultRepo, wallet);\n      return createResponse(requestId, \"0x\" + savedHash);\n    } catch (Exception e) {\n      LOG.error(CREATE_WALLET_ERROR, e);\n      return createErrorResponse(requestId, INTERNAL_ERROR, CREATE_WALLET_ERROR);\n    }\n  }\n\n  public String updateWallet(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String name = params.get(0);\n    String walletHash = retrieveHash(params, 1);\n    String publicInfo = params.get(2);\n\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n    } catch (EntityDoesNotExistsException e) {\n      LOG.error(UNKNOWN_WALLET_ERROR, e);\n      wallet = null;\n    }\n    if (wallet == null) {\n      return createErrorResponse(requestId, INVALID_REQUEST, UNKNOWN_WALLET_ERROR);\n    }\n    wallet.setName(name);\n    wallet.setPublicInfo(publicInfo);\n    try {\n      crossStorageApi.createOrUpdate(defaultRepo, wallet);\n      return createResponse(requestId, name);\n    } catch (Exception e) {\n      LOG.error(UPDATE_WALLET_ERROR, e);\n      return createErrorResponse(requestId, INTERNAL_ERROR, UPDATE_WALLET_ERROR);\n    }\n  }\n\n  public String getWalletInfo(String requestId, Map<String, Object> parameters) {\n    List<String> params = (List<String>) parameters.get(\"params\");\n    String walletHash = retrieveHash(params, 0);\n    Wallet wallet = null;\n    try {\n      wallet = crossStorageApi.find(defaultRepo, walletHash.toLowerCase(), Wallet.class);\n    } catch (Exception e) {\n      LOG.error(UNKNOWN_WALLET_ERROR, e);\n      wallet = null;\n    }\n    if (wallet == null) {\n      return createErrorResponse(requestId, RESOURCE_NOT_FOUND, UNKNOWN_WALLET_ERROR);\n    }\n    String response = \"{\\n\";\n    response += \"\\\"name\\\":\\\"\" + wallet.getName() + \"\\\"\";\n    if (wallet.getPublicInfo() != null) {\n      response += \",\\n\\\"publicInfo\\\":\" + wallet.getPublicInfo() + \"\";\n    }\n    response += \"\\n}\";\n    return createResponse(requestId, response);\n  }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ {
    "groupId" : "org.web3j",
    "artifactId" : "crypto",
    "version" : "4.8.9",
    "coordinates" : "org.web3j:crypto:4.8.9"
  } ],
  "importScriptInstances" : [ {
    "code" : "io.liquichain.core.BlockForgerScript",
    "description" : "Bock forging script",
    "inputs" : [ ],
    "outputs" : [ {
      "name" : "lastBlock",
      "type" : "Block"
    } ],
    "generateOutputs" : false,
    "type" : "JAVA",
    "transactionType" : "SAME",
    "script" : "package io.liquichain.core;\r\n\r\nimport java.util.Map;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Arrays;\r\nimport java.util.ArrayList;\r\nimport java.math.BigInteger;\r\nimport java.time.Instant;\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\nimport java.util.stream.Collectors;\r\nimport java.io.IOException;\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport java.math.BigInteger;\r\nimport org.meveo.model.customEntities.Block;\r\nimport org.meveo.model.customEntities.Wallet;\r\nimport org.meveo.model.customEntities.Transaction;\r\nimport org.meveo.model.storage.Repository;\r\nimport org.meveo.service.storage.RepositoryService;\r\nimport org.meveo.api.persistence.CrossStorageApi;\r\nimport org.meveo.persistence.CrossStorageService;\r\nimport org.meveo.cache.CustomFieldsCacheContainerProvider;\r\nimport org.meveo.api.exception.EntityDoesNotExistsException;\r\nimport org.meveo.admin.util.pagination.PaginationConfiguration;\r\nimport org.meveo.model.persistence.CEIUtils;\r\nimport org.meveo.service.custom.CustomTableService;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport org.primefaces.model.SortOrder;\r\n\r\nimport org.web3j.crypto.*;\r\n\r\npublic class BlockForgerScript extends Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(BlockForgerScript.class);\r\n  \r\n    private static long chainId=76;\r\n\r\n    private int networkId = 7;\r\n\r\n    static public long blockHeight = 1;\r\n  \r\n    private Block parentBlock=null;\r\n    \r\n    private String exampleBlock = \"{\" +\r\n      \"\\\"difficulty\\\":\\\"0x5\\\",\" +\r\n      \"\\\"extraData\\\":\\\"0xd58301090083626f7286676f312e3133856c696e75780000000000000000000021c9effaf6549e725463c7877ddebe9a2916e03228624e4bfd1e3f811da792772b54d9e4eb793c54afb4a29f014846736755043e4778999046d0577c6e57e72100\\\",\"\r\n      + \"\\\"gasLimit\\\":\\\"0xe984c2\\\",\" + \"\\\"gasUsed\\\":\\\"0x0\\\",\" \r\n      + \"\\\"hash\\\":\\\"0xaa14340feb15e26bc354bb839b2aa41cc7984676249c155ac5e4d281a8d08809\\\",\"\r\n      + \"\\\"logsBloom\\\":\\\"0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\",\"\r\n      + \"\\\"miner\\\":\\\"0x0000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"mixHash\\\":\\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\" +\r\n      \"\\\"nonce\\\":\\\"0x0000000000000000\\\",\" +\r\n      \"\\\"number\\\":\\\"0x1b4\\\",\" +\r\n      \"\\\"parentHash\\\":\\\"0xc8ccb81f484a428a3a1669d611f55f880b362b612f726711947d98f5bc5af573\\\",\" + \r\n      \"\\\"receiptsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" +\r\n      \"\\\"sha3Uncles\\\":\\\"0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\\\",\" +\r\n      \"\\\"size\\\":\\\"0x260\\\",\" +\r\n      \"\\\"stateRoot\\\":\\\"0xffcb834d62706995e9e7bf10cc9a9e42a82fea998d59b3a5cfad8975dbfe3f87\\\",\" +\r\n      \"\\\"timestamp\\\":\\\"0x5ed9a43f\\\",\" +\r\n      \"\\\"totalDifficulty\\\":\\\"0x881\\\",\" +\r\n      \"\\\"transactions\\\":[\" + \"],\" + \r\n      \"\\\"transactionsRoot\\\":\\\"0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\\",\" + \r\n      \"\\\"uncles\\\":[  \" + \"]}\";\r\n\r\n      \r\n\tprivate CustomFieldsCacheContainerProvider cetCache = getCDIBean(CustomFieldsCacheContainerProvider.class);\r\n    private CrossStorageService crossStorageService = getCDIBean(CrossStorageService.class);\r\n    private CustomTableService customTableService = getCDIBean(CustomTableService.class);\r\n    \r\n    private static PaginationConfiguration lastBlockPC = new PaginationConfiguration(\"blockNumber\",SortOrder.DESCENDING);\r\n  \r\n  \tprivate CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\r\n    private RepositoryService repositoryService = getCDIBean(RepositoryService.class);\r\n    private Repository defaultRepo = repositoryService.findDefaultRepository();\r\n\r\n    \r\n    private static List<Transaction> currentTransactions = new ArrayList<>();\r\n    private static List<Transaction> nextTransactions = new ArrayList<>();\r\n  \r\n    private static Instant nextBlockDate;\r\n    private static AtomicBoolean isForging = new AtomicBoolean(false);\r\n  \r\n    public static void addTransaction(Transaction t){\r\n      if(isForging.get()){\r\n          nextTransactions.add(t);\r\n      } else {\r\n          currentTransactions.add(t);\r\n      }\r\n    }\r\n  \r\n    public Block getLastBlock(){\r\n        Block result = null;\r\n        try{\r\n            //log.info(\"query : \"+customTableService.getQuery(\"block\", lastBlockPC));\r\n        List<Map<String, Object>> res = crossStorageService.find(defaultRepo, cetCache.getCustomEntityTemplate(\"Block\"), lastBlockPC);\r\n        if(res.size()>0){\r\n            result = CEIUtils.deserialize(res.get(0), Block.class);\r\n            //log.info(\"lastBlock number:{}\",result.getBlockNumber());\r\n        }\r\n        } catch(Exception e){\r\n          log.error(\"getLastBlock:{}\",e);\r\n        }\r\n        return result;\r\n    }\r\n  \r\n    @Override\r\n    public void execute(Map<String, Object> parameters) throws BusinessException {\r\n      //log.info(\"execute forging\");\r\n      if(parentBlock==null){\r\n      \t//log.info(\"retreive last block from chain\");\r\n        parentBlock = getLastBlock();\r\n      }\r\n      if(isForging.getAndSet(true)){\r\n         log.error(\"we are already forging\");\r\n         return;\r\n      } \r\n      if(currentTransactions.size()==0){\r\n        //log.info(\"no transaction to forge\");\r\n        blockHeight=parentBlock.getBlockNumber();\r\n        isForging.set(false);\r\n        return;\r\n      } else {\r\n        log.info(\"forging {} transactions\",currentTransactions.size());\r\n        Map<String,Wallet> wallets = new HashMap<>();\r\n        List<Transaction> orderedTransactions = currentTransactions.stream().sorted((t1,t2)->(t1.getCreationDate().compareTo(t2.getCreationDate()))).collect(Collectors.toList());\r\n        \r\n        blockHeight=parentBlock.getBlockNumber()+1;\r\n        \r\n        String transactionHashes=\"\";\r\n        List<Transaction> invalidTransactions = new ArrayList<>();\r\n        for(Transaction t: currentTransactions){\r\n          log.info(\" transaction date : {}\",t.getCreationDate());\r\n          if(!wallets.containsKey(t.getFromHexHash())){\r\n            try{\r\n            \tWallet originWallet = crossStorageApi.find(defaultRepo,t.getFromHexHash(), Wallet.class);\r\n                log.info(\"add originWallet:{} {} to map\",originWallet.getUuid(),originWallet.getBalance());\r\n                wallets.put(t.getFromHexHash(),originWallet);\r\n            } catch(Exception e){\r\n              log.info(\" cannot find origin wallet, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try {\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n          if(t.getBlockNumber() == null){\r\n            Wallet originWallet = wallets.get(t.getFromHexHash());\r\n          \tlog.info(\"originWallet 0x{} old balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n            BigInteger transacValue = new BigInteger(t.getValue());\r\n          \tif(new BigInteger(originWallet.getBalance()).compareTo(transacValue)>=0){\r\n                originWallet.setBalance(\"\"+new BigInteger(originWallet.getBalance()).add(transacValue.negate()));\r\n                try{\r\n            \t\tWallet destinationWallet = crossStorageApi.find(defaultRepo,t.getToHexHash(), Wallet.class);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} old balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n                    destinationWallet.setBalance(\"\"+new BigInteger(destinationWallet.getBalance()).add(transacValue));\r\n          \t\t\tcrossStorageApi.createOrUpdate(defaultRepo, destinationWallet);\r\n          \t\t\tlog.info(\"destinationWallet 0x{} new balance:{}\",t.getToHexHash(),destinationWallet.getBalance());\r\n          \t\t\ttransactionHashes+=t.getHexHash();\r\n                } catch(Exception e){\r\n              \t\tlog.info(\" cannot find destination wallet, set blockNumber to INVALID\");\r\n              \t\tt.setBlockNumber(\"INVALID\");\r\n              \t\ttry{\r\n\t\t\t\t\t\tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n                    } catch(Exception ex){\r\n                \t\tex.printStackTrace();\r\n              \t\t}\r\n              \t\tinvalidTransactions.add(t);\r\n                }\r\n          \t} else {\r\n              log.info(\"insufficient balance, set blockNumber to INVALID\");\r\n              t.setBlockNumber(\"INVALID\");\r\n              try{\r\n              \tcrossStorageApi.createOrUpdate(defaultRepo, t);\r\n              } catch(Exception ex){\r\n                ex.printStackTrace();\r\n              }\r\n              invalidTransactions.add(t);\r\n            }\r\n          }\r\n        }\r\n        currentTransactions.removeAll(invalidTransactions);\r\n        Block block =  new Block();\r\n        block.setCreationDate(Instant.now());\r\n        \r\n        //FIXME parent should not be null\r\n        block.setParentHash(parentBlock==null?\"\":parentBlock.getHash());\r\n        block.setSize((long)currentTransactions.size());\r\n        \r\n        //FIXME hash parent hash\r\n        block.setHash(Hash.sha3(transactionHashes).substring(2));\r\n        \r\n        block.setBlockNumber(blockHeight);\r\n        try{\r\n          crossStorageApi.createOrUpdate(defaultRepo, block);\r\n          long i=0;\r\n          for(Transaction t: currentTransactions){\r\n              Wallet originWallet = wallets.get(t.getFromHexHash());\r\n              log.info(\"originWallet 0x{} new balance:{}\",t.getFromHexHash(),originWallet.getBalance());\r\n              crossStorageApi.createOrUpdate(defaultRepo, originWallet);\r\n              t.setBlockHash(block.getHash());\r\n              t.setBlockNumber(\"\"+block.getBlockNumber());\r\n              t.setTransactionIndex(i++);\r\n              crossStorageApi.createOrUpdate(defaultRepo, t);\r\n          }\r\n\r\n          parentBlock=block;\r\n          currentTransactions = nextTransactions;\r\n          nextTransactions = new ArrayList<>();\r\n        } catch(Exception ex){\r\n            ex.printStackTrace();\r\n        }\r\n        \r\n        isForging.set(false);\r\n      }\r\n    }\r\n  \r\n}\r\n",
    "executionRoles" : [ ],
    "sourcingRoles" : [ ],
    "mavenDependencies" : [ {
      "groupId" : "org.web3j",
      "artifactId" : "crypto",
      "version" : "4.8.9",
      "coordinates" : "org.web3j:crypto:4.8.9"
    } ],
    "importScriptInstances" : [ ]
  } ]
}