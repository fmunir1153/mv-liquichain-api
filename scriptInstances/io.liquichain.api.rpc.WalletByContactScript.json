{
  "code" : "io.liquichain.api.rpc.WalletByContactScript",
  "inputs" : [ {
    "name" : "contactHashes",
    "type" : "List<String>"
  } ],
  "outputs" : [ {
    "name" : "result",
    "type" : "String"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package io.liquichain.api.rpc;\n\nimport java.util.Arrays;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\nimport com.google.gson.Gson;\nimport org.meveo.api.persistence.CrossStorageApi;\nimport org.meveo.model.customEntities.Wallet;\nimport org.meveo.model.storage.Repository;\nimport org.meveo.service.script.Script;\nimport org.meveo.admin.exception.BusinessException;\nimport org.meveo.service.storage.RepositoryService;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class WalletByContactScript extends Script {\n    private static final Logger LOG = LoggerFactory.getLogger(WalletByContactScript.class);\n\n    private final RepositoryService repositoryService = getCDIBean(RepositoryService.class);\n    protected final CrossStorageApi crossStorageApi = getCDIBean(CrossStorageApi.class);\n    protected final Repository defaultRepo = repositoryService.findDefaultRepository();\n\n    private String result;\n    private List<String> contactHashes;\n\n    @Override\n    public void execute(Map<String, Object> parameters) throws BusinessException {\n        LOG.info(\"contactHashes: {}\", this.contactHashes);\n        if (contactHashes != null && contactHashes.size() > 0) {\n            Map<String, String> walletHashes = crossStorageApi\n                    .find(defaultRepo, Wallet.class)\n                    .by(\"inList phoneNumber\", this.contactHashes)\n                    .getResults()\n                    .stream()\n                    .collect(Collectors.toMap(wallet -> wallet.getPhoneNumber().getUuid(), wallet -> wallet.getUuid()));\n\n            result = new Gson().toJson(walletHashes);\n        }\n    }\n\n    public String getResult() {\n        return this.result;\n    }\n\n    public void setContactHashes(List<String> contactHashes) {\n        this.contactHashes = contactHashes;\n    }\n}\n",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}